# -------------------------------------------------------------------------------------------------------------------- #
# Для расчетов 
import numpy as np


# ==================================================================================================================== #
# Градиент

def gradient(f, x):
    delta = 1e-9
    """
    Функция вычисления градиента в заданной точке с константной точностью

    Аргументы:
    f -- функция
    x -- точка

    Возвращает:
    ans -- градиент функции в точке x
    """

    n = len(x)
    xd = np.copy(x)
    ans = np.zeros(n)

    for i in range(n):
        xd[i] += delta
        ans[i] = np.divide(f(xd) - f(x), delta)
        xd[i] -= delta

    return ans


# ==================================================================================================================== #
# Быстрый градиент (по одной координаты)

def fast_gradient(f, x, i, delta=1e-9):
    """
    Функция вычисления градиента в заданной точке с константной точностью

    Аргументы:
    f -- функция
    x -- точка
    xd -- копия точки
    i -- индекс необходимой координаты
    delta -- дельта

    Возвращает:
    ans -- градиент функции в точке x в координате i
    """

    xd = np.copy(x)
    xd[i] += delta
    ans = np.divide(f(xd) - f(x), delta)
    xd[i] -= delta

    return ans


# ==================================================================================================================== #
# Неполный градиент (по переданным координатам)

def partial_gradient(f, x, indexes, delta=1e-9):
    """
    Функция вычисления градиента в заданной точке с константной точностью

    Аргументы:
    f -- функция
    x -- точка
    i -- индекс необходимой координаты
    delta -- дельта

    Возвращает:
    ans -- градиент функции в точке x
    """

    n = len(x)
    xd = np.copy(x)
    ans = np.zeros(n)

    for i in indexes:
        xd[i] += delta
        ans = np.divide(f(xd) - f(x), delta)
        xd[i] -= delta

    return ans

# ==================================================================================================================== #
